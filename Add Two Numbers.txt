/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode l3 = new ListNode();
        ListNode p = l3;
        int one = 0;

        while (l1 != null && l2 != null) {
            if ((l1.val + l2.val + one) >= 10) {
                ListNode temp = new ListNode(l1.val + l2.val + one - 10);
                p.next = temp;

                if (one == 0)
                    one++;
            } else if ((l1.val + l2.val + one) < 10) {
                ListNode temp = new ListNode(l1.val + l2.val + one);
                p.next = temp;
                one = 0;
            }

            l1 = l1.next;
            l2 = l2.next;
            p = p.next;
        }

        if (l1 != null) {
            while (l1 != null) {
                if ((l1.val + one) >= 10) {
                    ListNode temp = new ListNode(l1.val + one - 10);
                    p.next = temp;

                    if (one == 0)
                        one++;
                } else if ((l1.val + one) < 10) {
                    ListNode temp = new ListNode(l1.val + one);
                    p.next = temp;
                    one = 0;
                }

                l1 = l1.next;
                p = p.next;
            }
        } else if (l2 != null) {
            while (l2 != null) {
                if ((l2.val + one) >= 10) {
                    ListNode temp = new ListNode(l2.val + one - 10);
                    p.next = temp;

                    if (one == 0)
                        one++;
                } else if ((l2.val + one) < 10) {
                    ListNode temp = new ListNode(l2.val + one);
                    p.next = temp;
                    one = 0;
                }

                l2 = l2.next;
                p = p.next;
            }
        }

        if (one == 1) {
            ListNode temp = new ListNode(1);
            p.next = temp;
            one = 0;
        }

        return l3.next;
    }
}